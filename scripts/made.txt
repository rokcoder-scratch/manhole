//----- Variables -----------------------------------------------------------------------------------------------------

mouseDown = 
_eventKey = 0
_eventMouseX = 57.333333333333
_eventMouseY = 0



//----- Sprite clicked events -----------------------------------------------------------------------------------------

WhenThisSpriteClicked()
{
    OptionsSelected = True;
}


//----- Broadcast received events -------------------------------------------------------------------------------------

WhenBroadcastReceived(MadeEngine::handleEvents)
{
    _eventMouseX = (((Sensing.MouseX() + Sensing.Of(offsetX, cursor)) + 240) / 1.5);
    _eventMouseY = ((180 - (Sensing.MouseY() + Sensing.Of(offsetY, cursor))) / 1.5);
    If (Not ((mouseDown == Sensing.MouseDown())))
    {
        mouseDown = Sensing.MouseDown();
        If Sensing.MouseDown()
        {
            _eventNum = 2;
        }
        Else
        {
            _eventNum = 1;
        }
    }
    Call //TODO("Right mouse button handling");
    Call //TODO("Handle key presses");
    If (OptionsSelected == True)
    {
        _eventNum = 5;
        _eventKey = 27;
        OptionsSelected = False;
    }
}

WhenBroadcastReceived(MadeEngine::MadeEngine)
{
    mouseDown = Sensing.MouseDown();
    _eventNum = 0;
    _eventMouseX = 0;
    _eventMouseY = 0;
    _eventKey = 0;
    OptionsSelected = False;
    Event.Broadcast("wait to show options");
    Event.BroadcastAndWait("GameDatabaseV2::GameDatabaseV2");
    Event.BroadcastAndWait("ScriptInterpreter::ScriptInterpreter");
}

WhenBroadcastReceived(MadeEngine::run)
{
    Event.BroadcastAndWait("MusicPlayer::MusicPlayer");
    Call syncSoundSettings;
    Call resetAllTimers;
    Event.BroadcastAndWait("GameDatabase:open");
    Event.BroadcastAndWait("ResourceReader::open");
    BroadcastParam1 = Sensing.Of(_mainCodeObjectIndex, database);
    Event.BroadcastAndWait("ScriptInterpreter::runScript");
}

WhenBroadcastReceived(thumbnail)
{
    Looks.Hide();
}

WhenBroadcastReceived(wait to show options)
{
    Wait Until (Graphics drawn? == True);
    Looks.Show();
}


//----- Custom blocks -------------------------------------------------------------------------------------------------

Define //TODO(string comment) (warp=false)
{
}

Define Error(string description) (warp=true)
{
}

Define resetAllTimers (warp=true)
{
    Call Error("resetAllTimers Not implemented");
}

Define syncSoundSettings (warp=true)
{
}


//----- Costumes ------------------------------------------------------------------------------------------------------

options.svg


//----- Sounds --------------------------------------------------------------------------------------------------------

pop.wav
