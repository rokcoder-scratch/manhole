//----- Variables -----------------------------------------------------------------------------------------------------

deltaTime = 1781
eventNum = 0
_autoStopSound = 0
_cdTimeStart = 5.856
_musicBeatStart = 167.032
_soundStarted = 0


//----- Lists ---------------------------------------------------------------------------------------------------------

phoneFreq1 = { }
phoneFreq2 = { }


//----- Broadcast received events -------------------------------------------------------------------------------------

WhenBroadcastReceived(clear data)
{
    List.DeleteAll(phoneFreq1);
    List.DeleteAll(phoneFreq2);
}

WhenBroadcastReceived(ScriptFunctions::ScriptFunctions)
{
    _autoStopSound = False;
    _soundStarted = False;
    screenLock = False;
    List.DeleteAll(phoneFreq1);
    List.DeleteAll(phoneFreq2);
    List.Add(phoneFreq1, 88);
    List.Add(phoneFreq1, 86);
    List.Add(phoneFreq1, 88);
    List.Add(phoneFreq1, 90);
    List.Add(phoneFreq1, 86);
    List.Add(phoneFreq1, 88);
    List.Add(phoneFreq1, 90);
    List.Add(phoneFreq1, 86);
    List.Add(phoneFreq1, 88);
    List.Add(phoneFreq1, 90);
    List.Add(phoneFreq1, 86);
    List.Add(phoneFreq1, 90);
    List.Add(phoneFreq2, 82);
    List.Add(phoneFreq2, 77);
    List.Add(phoneFreq2, 77);
    List.Add(phoneFreq2, 77);
    List.Add(phoneFreq2, 79);
    List.Add(phoneFreq2, 79);
    List.Add(phoneFreq2, 79);
    List.Add(phoneFreq2, 80);
    List.Add(phoneFreq2, 80);
    List.Add(phoneFreq2, 80);
    List.Add(phoneFreq2, 82);
    List.Add(phoneFreq2, 82);
}

WhenBroadcastReceived(ScriptFunctions::setupExternalsTable)
{
    List.DeleteAll(ScriptFuncs::_externalFuncs);
    List.Add(ScriptFuncs::_externalFuncs, "sfSystemCall");
    List.Add(ScriptFuncs::_externalFuncs, "sfInitGraf");
    List.Add(ScriptFuncs::_externalFuncs, "sfRestoreGraf");
    List.Add(ScriptFuncs::_externalFuncs, "sfDrawPicture");
    List.Add(ScriptFuncs::_externalFuncs, "sfClearScreen");
    List.Add(ScriptFuncs::_externalFuncs, "sfShowPage");
    List.Add(ScriptFuncs::_externalFuncs, "sfPollEvent");
    List.Add(ScriptFuncs::_externalFuncs, "sfGetMouseX");
    List.Add(ScriptFuncs::_externalFuncs, "sfGetMouseY");
    List.Add(ScriptFuncs::_externalFuncs, "sfGetKey");
    List.Add(ScriptFuncs::_externalFuncs, "sfSetVisualEffect");
    List.Add(ScriptFuncs::_externalFuncs, "sfPlaySound");
    List.Add(ScriptFuncs::_externalFuncs, "sfPlayMusic");
    List.Add(ScriptFuncs::_externalFuncs, "sfStopMusic");
    List.Add(ScriptFuncs::_externalFuncs, "sfIsMusicPlaying");
    List.Add(ScriptFuncs::_externalFuncs, "sfSetTextPos");
    List.Add(ScriptFuncs::_externalFuncs, "sfFlashScreen");
    List.Add(ScriptFuncs::_externalFuncs, "sfPlayNote");
    List.Add(ScriptFuncs::_externalFuncs, "sfStopNote");
    List.Add(ScriptFuncs::_externalFuncs, "sfPlayTele");
    List.Add(ScriptFuncs::_externalFuncs, "sfStopTele");
    List.Add(ScriptFuncs::_externalFuncs, "sfHideMouseCursor");
    List.Add(ScriptFuncs::_externalFuncs, "sfShowMouseCursor");
    List.Add(ScriptFuncs::_externalFuncs, "sfGetMusicBeat");
    List.Add(ScriptFuncs::_externalFuncs, "sfSetScreenLock");
    List.Add(ScriptFuncs::_externalFuncs, "sfAddSprite");
    List.Add(ScriptFuncs::_externalFuncs, "sfFreeAnim");
    List.Add(ScriptFuncs::_externalFuncs, "sfDrawSprite");
    List.Add(ScriptFuncs::_externalFuncs, "sfEraseSprites");
    List.Add(ScriptFuncs::_externalFuncs, "sfUpdateSprites");
    List.Add(ScriptFuncs::_externalFuncs, "sfGetTimer");
    List.Add(ScriptFuncs::_externalFuncs, "sfSetTimer");
    List.Add(ScriptFuncs::_externalFuncs, "sfResetTimer");
    List.Add(ScriptFuncs::_externalFuncs, "sfAllocTimer");
    List.Add(ScriptFuncs::_externalFuncs, "sfFreeTimer");
    List.Add(ScriptFuncs::_externalFuncs, "sfSetPaletteLock");
    List.Add(ScriptFuncs::_externalFuncs, "sfSetFont");
    List.Add(ScriptFuncs::_externalFuncs, "sfDrawText");
    List.Add(ScriptFuncs::_externalFuncs, "sfHomeText");
    List.Add(ScriptFuncs::_externalFuncs, "sfSetTextRect");
    List.Add(ScriptFuncs::_externalFuncs, "sfSetTextXY");
    List.Add(ScriptFuncs::_externalFuncs, "sfSetFontDropShadow");
    List.Add(ScriptFuncs::_externalFuncs, "sfSetFontColor");
    List.Add(ScriptFuncs::_externalFuncs, "sfSetFontOutline");
    List.Add(ScriptFuncs::_externalFuncs, "sfLoadMouseCursor");
    List.Add(ScriptFuncs::_externalFuncs, "sfSetSpriteGround");
    List.Add(ScriptFuncs::_externalFuncs, "sfLoadResText");
    List.Add(ScriptFuncs::_externalFuncs, "sfAddScreenMask");
    List.Add(ScriptFuncs::_externalFuncs, "sfSetSpriteMask");
    List.Add(ScriptFuncs::_externalFuncs, "sfSoundPlaying");
    List.Add(ScriptFuncs::_externalFuncs, "sfStopSound");
    List.Add(ScriptFuncs::_externalFuncs, "sfPlayVoice");
    List.Add(ScriptFuncs::_externalFuncs, "sfPlayCd");
    List.Add(ScriptFuncs::_externalFuncs, "sfStopCd");
    List.Add(ScriptFuncs::_externalFuncs, "sfGetCdStatus");
    List.Add(ScriptFuncs::_externalFuncs, "sfGetCdTime");
    List.Add(ScriptFuncs::_externalFuncs, "sfPlayCdSegment");
}

WhenBroadcastReceived(sfAddScreenMask)
{
    Call Not implemented yet("AddScreenMask");
}

WhenBroadcastReceived(sfAddSprite)
{
    Call Not implemented yet("AddSprite");
}

WhenBroadcastReceived(sfAllocTimer)
{
    Call Not implemented yet("AllocTimer");
}

WhenBroadcastReceived(sfClearScreen)
{
    If (screenLock == True)
    {
        ReturnValue = 0;
    }
    If (_autoStopSound == True)
    {
        Event.BroadcastAndWait("stop sfx");
        _autoStopSound = False;
    }
    List.Add(Gfx.queue, Sensing.Of(command.clearScr, gfx));
    ReturnValue = 0;
}

WhenBroadcastReceived(sfDrawPicture)
{
    List.Add(Gfx.queue, Sensing.Of(command.drawPic, gfx));
    List.Add(Gfx.queue, argv[5]);
    List.Add(Gfx.queue, argv[4]);
    List.Add(Gfx.queue, argv[3]);
    List.Add(Gfx.queue, argv[2]);
    List.Add(Gfx.queue, argv[1]);
    ReturnValue = 0;
}

WhenBroadcastReceived(sfDrawSprite)
{
    Call Not implemented yet("DrawSprite");
}

WhenBroadcastReceived(sfDrawText)
{
    Call Not implemented yet("DrawText");
}

WhenBroadcastReceived(sfEraseSprites)
{
    Call Not implemented yet("EraseSprites");
}

WhenBroadcastReceived(sfFlashScreen)
{
    BroadcastParam1 = argv[1];
    Event.BroadcastAndWait("flash");
    ReturnValue = 0;
}

WhenBroadcastReceived(sfFreeAnim)
{
    Call Not implemented yet("FreeAnim");
}

WhenBroadcastReceived(sfFreeTimer)
{
    Call Not implemented yet("FreeTimer");
}

WhenBroadcastReceived(sfGetCdStatus)
{
    If (MusicPlaying == True)
    {
        ReturnValue = 1;
    }
    Else
    {
        ReturnValue = 0;
    }
}

WhenBroadcastReceived(sfGetCdTime)
{
    If (MusicPlaying == True)
    {
        deltaTime = ((Sensing.Timer() - _cdTimeStart) * 1000);
        ReturnValue = (((deltaTime / 1000) * 30) + (((deltaTime % 1000) / 75) * (30 / 75)));
    }
    Else
    {
        ReturnValue = 32000;
    }
}

WhenBroadcastReceived(sfGetKey)
{
    ReturnValue = Sensing.Of(_eventKey, made);
}

WhenBroadcastReceived(sfGetMouseX)
{
    ReturnValue = Sensing.Of(_eventMouseX, made);
}

WhenBroadcastReceived(sfGetMouseY)
{
    ReturnValue = Sensing.Of(_eventMouseY, made);
}

WhenBroadcastReceived(sfGetMusicBeat)
{
    ReturnValue = (((Sensing.Timer() - _musicBeatStart) * 1000) / 360);
}

WhenBroadcastReceived(sfGetTimer)
{
    Call Not implemented yet("GetTimer");
}

WhenBroadcastReceived(sfHideMouseCursor)
{
    Event.BroadcastAndWait("hide cursor");
    ReturnValue = 0;
}

WhenBroadcastReceived(sfHomeText)
{
    Call Not implemented yet("HomeText");
}

WhenBroadcastReceived(sfInitGraf)
{
    ReturnValue = 0;
}

WhenBroadcastReceived(sfIsMusicPlaying)
{
    ReturnValue = 0;
}

WhenBroadcastReceived(sfLoadMouseCursor)
{
    Call Not implemented yet("LoadMouseCursor");
}

WhenBroadcastReceived(sfLoadResText)
{
    Call Not implemented yet("LoadResText");
}

WhenBroadcastReceived(sfPlayCd)
{
    BroadcastParam1 = argv[1];
    Event.BroadcastAndWait("music play");
    _cdTimeStart = Sensing.Timer();
    ReturnValue = 1;
}

WhenBroadcastReceived(sfPlayCdSegment)
{
    ReturnValue = 0;
}

WhenBroadcastReceived(sfPlayMusic)
{
    Call //("This should play MIDI music but there's only one MIDI file in the resource of The Manhole and it's empty!");
    _musicBeatStart = Sensing.Timer();
    ReturnValue = 0;
}

WhenBroadcastReceived(sfPlayNote)
{
    BroadcastParam2 = 1;
    BroadcastParam1 = argv[1];
    Event.BroadcastAndWait("play note");
    ReturnValue = 0;
}

WhenBroadcastReceived(sfPlaySound)
{
    Event.BroadcastAndWait("stopSound");
    If (argc == 1)
    {
        BroadcastParam1 = argv[1];
        _autoStopSound = False;
    }
    Else
    {
        BroadcastParam1 = argv[2];
        _autoStopSound = (argv[1] == 1);
    }
    Event.BroadcastAndWait("sfx play");
    _soundStarted = True;
    ReturnValue = 0;
}

WhenBroadcastReceived(sfPlayTele)
{
    BroadcastParam2 = 6;
    BroadcastParam1 = (phoneFreq1[(argv[1] + 1)] - 12);
    Event.BroadcastAndWait("play note");
    BroadcastParam1 = (phoneFreq2[(argv[1] + 1)] - 12);
    Event.BroadcastAndWait("play note");
    ReturnValue = 0;
}

WhenBroadcastReceived(sfPlayVoice)
{
    Event.BroadcastAndWait("stopSound");
    BroadcastParam1 = argv[1];
    _autoStopSound = True;
    Event.BroadcastAndWait("sfx play");
    _soundStarted = True;
    ReturnValue = 0;
}

WhenBroadcastReceived(sfPollEvent)
{
    Event.BroadcastAndWait("MadeEngine::handleEvents");
    eventNum = _eventNum;
    _eventNum = 0;
    ReturnValue = eventNum;
}

WhenBroadcastReceived(sfResetTimer)
{
    Call Not implemented yet("ResetTimer");
}

WhenBroadcastReceived(sfRestoreGraf)
{
    ReturnValue = 0;
}

WhenBroadcastReceived(sfSetFont)
{
    Call Not implemented yet("SetFont");
}

WhenBroadcastReceived(sfSetFontColor)
{
    Call Not implemented yet("SetFontColour");
}

WhenBroadcastReceived(sfSetFontDropShadow)
{
    Call Not implemented yet("SetFontDropShadow");
}

WhenBroadcastReceived(sfSetFontOutline)
{
    Call Not implemented yet("SetFontOutline");
}

WhenBroadcastReceived(sfSetPaletteLock)
{
    Call Not implemented yet("SetPaletteLock");
}

WhenBroadcastReceived(sfSetScreenLock)
{
    screenLock = (Not ((argv[1] == 0)));
    ReturnValue = 0;
}

WhenBroadcastReceived(sfSetSpriteGround)
{
    Call Not implemented yet("SetSpriteGound");
}

WhenBroadcastReceived(sfSetSpriteMask)
{
    Call Not implemented yet("SetSpriteMask");
}

WhenBroadcastReceived(sfSetTextPos)
{
    ReturnValue = 0;
}

WhenBroadcastReceived(sfSetTextRect)
{
    Call Not implemented yet("SetTextRect");
}

WhenBroadcastReceived(sfSetTextXY)
{
    Call Not implemented yet("SetTextXY");
}

WhenBroadcastReceived(sfSetTimer)
{
    Call Not implemented yet("SetTimer");
}

WhenBroadcastReceived(sfSetVisualEffect)
{
    _visualEffectNum = argv[1];
    ReturnValue = 0;
}

WhenBroadcastReceived(sfShowMouseCursor)
{
    Event.BroadcastAndWait("show cursor");
    ReturnValue = 0;
}

WhenBroadcastReceived(sfShowPage)
{
    Event.BroadcastAndWait("process graphics queue");
    ReturnValue = 56;
}

WhenBroadcastReceived(sfSoundPlaying)
{
    If (SoundsActiveCount > 0)
    {
        ReturnValue = 1;
    }
    Else
    {
        ReturnValue = 0;
    }
}

WhenBroadcastReceived(sfStopCd)
{
    If (MusicPlaying == True)
    {
        Event.BroadcastAndWait("stop music");
        ReturnValue = 1;
    }
    Else
    {
        ReturnValue = 0;
    }
}

WhenBroadcastReceived(sfStopMusic)
{
    ReturnValue = 0;
}

WhenBroadcastReceived(sfStopNote)
{
    Event.BroadcastAndWait("stop note");
    ReturnValue = 0;
}

WhenBroadcastReceived(sfStopSound)
{
    Event.BroadcastAndWait("stopSound");
    _autoStopSound = False;
    ReturnValue = 0;
}

WhenBroadcastReceived(sfStopTele)
{
    Event.BroadcastAndWait("stop note");
    ReturnValue = 0;
}

WhenBroadcastReceived(sfSystemCall)
{
    ReturnValue = 0;
}

WhenBroadcastReceived(sfUpdateSprites)
{
    Call Not implemented yet("UpdateSprites");
}

WhenBroadcastReceived(stopSound)
{
    Event.BroadcastAndWait("stop sfx");
    _soundStarted = False;
}


//----- Custom blocks -------------------------------------------------------------------------------------------------

Define //(string comment) (warp=false)
{
}

Define Not implemented yet(string function) (warp=false)
{
}


//----- Costumes ------------------------------------------------------------------------------------------------------

costume1.svg


//----- Sounds --------------------------------------------------------------------------------------------------------

pop.wav
